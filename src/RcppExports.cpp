// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "genet_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_weighted_interactions
SpMat compute_weighted_interactions(MSpMat H, VectorXi cards, bool dc, Rcpp::NumericVector target);
RcppExport SEXP _genet_compute_weighted_interactions(SEXP HSEXP, SEXP cardsSEXP, SEXP dcSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type H(HSEXP);
    Rcpp::traits::input_parameter< VectorXi >::type cards(cardsSEXP);
    Rcpp::traits::input_parameter< bool >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_weighted_interactions(H, cards, dc, target));
    return rcpp_result_gen;
END_RCPP
}
// initialize_root
VectorXd initialize_root(MSpMat mapped_interactions, VectorXd target);
RcppExport SEXP _genet_initialize_root(SEXP mapped_interactionsSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type mapped_interactions(mapped_interactionsSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_root(mapped_interactions, target));
    return rcpp_result_gen;
END_RCPP
}
// update_J_and_f
void update_J_and_f(SpMat& J, VectorXd& f, MSpMat interactions, VectorXd root, VectorXd target);
RcppExport SEXP _genet_update_J_and_f(SEXP JSEXP, SEXP fSEXP, SEXP interactionsSEXP, SEXP rootSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SpMat& >::type J(JSEXP);
    Rcpp::traits::input_parameter< VectorXd& >::type f(fSEXP);
    Rcpp::traits::input_parameter< MSpMat >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type root(rootSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type target(targetSEXP);
    update_J_and_f(J, f, interactions, root, target);
    return R_NilValue;
END_RCPP
}
// check_convergence
void check_convergence(bool& not_converged, VectorXd diff_root, VectorXd f, double eps);
RcppExport SEXP _genet_check_convergence(SEXP not_convergedSEXP, SEXP diff_rootSEXP, SEXP fSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool& >::type not_converged(not_convergedSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type diff_root(diff_rootSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    check_convergence(not_converged, diff_root, f, eps);
    return R_NilValue;
END_RCPP
}
// MNR
VectorXd MNR(MSpMat interactions, VectorXd root_ini, VectorXd target, double eps, bool verbose, int max_ite);
RcppExport SEXP _genet_MNR(SEXP interactionsSEXP, SEXP root_iniSEXP, SEXP targetSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP max_iteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type root_ini(root_iniSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type max_ite(max_iteSEXP);
    rcpp_result_gen = Rcpp::wrap(MNR(interactions, root_ini, target, eps, verbose, max_ite));
    return rcpp_result_gen;
END_RCPP
}
// rBKN
SEXP rBKN(VectorXi cards, const MSpMat H, const VectorXd root, bool verbose, bool way_too_verbose);
RcppExport SEXP _genet_rBKN(SEXP cardsSEXP, SEXP HSEXP, SEXP rootSEXP, SEXP verboseSEXP, SEXP way_too_verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXi >::type cards(cardsSEXP);
    Rcpp::traits::input_parameter< const MSpMat >::type H(HSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type root(rootSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type way_too_verbose(way_too_verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rBKN(cards, H, root, verbose, way_too_verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_genet_compute_weighted_interactions", (DL_FUNC) &_genet_compute_weighted_interactions, 4},
    {"_genet_initialize_root", (DL_FUNC) &_genet_initialize_root, 2},
    {"_genet_update_J_and_f", (DL_FUNC) &_genet_update_J_and_f, 5},
    {"_genet_check_convergence", (DL_FUNC) &_genet_check_convergence, 4},
    {"_genet_MNR", (DL_FUNC) &_genet_MNR, 6},
    {"_genet_rBKN", (DL_FUNC) &_genet_rBKN, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_genet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
